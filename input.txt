import Foundation
import SwiftUI

/// Enumeration of every Python-learning topic handled by the quiz engine.
enum Topic: String, CaseIterable, Hashable, Identifiable {

    // -- Existing topics
    case variableKeyword, constantKeyword, optionals
    case closures, structsVsClasses, protocols
    case generics, concurrency
    case controlFlow, listComprehensions, dictSetComprehensions
    case decorators
    case contextManagers, exceptions, modulesPackages
    case iteratorsGenerators
    case functions, stringFormatting, fileIO, logging
    case testing, patternMatching, virtualEnv, performance
    case itertoolsFunctools

    // -- New topics
    case indentation, dataTypes, listsTuples, setsDicts, slicing
    case variableScope, builtins, sorting, regex, serialization
    case subprocessModule, networking, oopInheritance, magicMethods
    case properties, advancedTyping, metaclasses, debugging
    case styleGuide, databaseSqlite

    var id: String { rawValue }

    /// User-facing title (≤ 25 characters each so they fit nicely in UI).
    var title: String {
        switch self {
        // ————— Existing —————
        case .variableKeyword:       return "Variables"
        case .constantKeyword:       return "Constants"
        case .optionals:             return "None & Nullability"
        case .closures:              return "Lambda Functions"
        case .structsVsClasses:      return "Classes & Data Classes"
        case .protocols:             return "Protocols"
        case .generics:              return "Type Hints & Generics"
        case .concurrency:           return "Asyncio & Concurrency"
        case .controlFlow:           return "Control Flow"
        case .listComprehensions:    return "List Comprehensions"
        case .dictSetComprehensions: return "Dict & Set Comprehensions"
        case .decorators:            return "Decorators"
        case .contextManagers:       return "Context Managers"
        case .exceptions:            return "Exceptions"
        case .modulesPackages:       return "Modules & Packages"
        case .iteratorsGenerators:   return "Iterators & Generators"
        case .functions:             return "Functions"
        case .stringFormatting:      return "F-Strings"
        case .fileIO:                return "File I/O"
        case .logging:               return "Logging"
        case .testing:               return "Testing & pytest"
        case .patternMatching:       return "Pattern Matching"
        case .virtualEnv:            return "Virtual Environments"
        case .performance:           return "Performance"
        case .itertoolsFunctools:    return "Itertools & functools"

        // ————— New —————
        case .indentation:           return "Indentation"
        case .dataTypes:             return "Core Data Types"
        case .listsTuples:           return "Lists & Tuples"
        case .setsDicts:             return "Sets & Dicts"
        case .slicing:               return "Slicing"
        case .variableScope:         return "Variable Scope"
        case .builtins:              return "Built-ins"
        case .sorting:               return "Sorting"
        case .regex:                 return "Regular Expressions"
        case .serialization:         return "JSON & Serialising"
        case .subprocessModule:      return "subprocess"
        case .networking:            return "Networking"
        case .oopInheritance:        return "OOP Inheritance"
        case .magicMethods:          return "Magic Methods"
        case .properties:            return "Properties"
        case .advancedTyping:        return "Advanced Typing"
        case .metaclasses:           return "Metaclasses"
        case .debugging:             return "Debugging"
        case .styleGuide:            return "Style & Formatting"
        case .databaseSqlite:        return "sqlite3"
        }
    }
}

extension Topic { static var modularAddition: Topic { .variableKeyword } }

/// ---------------------------------------------------------------------
/// MARK:  Topic-centric explanations
/// ---------------------------------------------------------------------
private struct TopicExplanations {
    private static let map: [Topic: String] = [

        // ————— Existing —————
        .variableKeyword:       "**Variables** are bound with `=`; names reference objects and can re-bind freely.",
        .constantKeyword:       "**Constants** rely on convention: ALL_CAPS at module scope (e.g. `PI = 3.14159`).",
        .optionals:             "**None** is the singleton signifying “no value”. Use `Optional[T]` or `T | None` in type hints.",
        .closures:              "**Lambda functions** create anonymous callables and can close over outer-scope names.",
        .structsVsClasses:      "**Classes** model state/behaviour; `@dataclass` (PEP 557) auto-generates boilerplate.",
        .protocols:             "**Protocols** (PEP 544) define structural contracts—implementation checked by attribute presence.",
        .generics:              "**Generics** via `typing` enable precise, reusable APIs.",
        .concurrency:           "**Concurrency**: `async`/`await` with `asyncio`, plus `threading` & `multiprocessing`.",
        .controlFlow:           "**Control flow**: `if`/`elif`/`else`, `for`, `while`, `break`, `continue`, `pass`.",
        .listComprehensions:    "**List comprehensions** build lists concisely: `[expr for x in seq if cond]`.",
        .dictSetComprehensions: "**Dict/Set comprehensions**: `{k:v for k,v in pairs}` or `{f(x) for x in seq}`.",
        .decorators:            "**Decorators** wrap callables and are declared with a leading `@decorator` line.",
        .contextManagers:       "**Context managers** via `with` manage resources deterministically.",
        .exceptions:            "**Exceptions**: raise subclasses of `Exception`; handle with `try`/`except`.",
        .modulesPackages:       "**Modules & packages**: `.py` files + directories with `__init__.py` (pre-3.3 requirement).",
        .iteratorsGenerators:   "**Iterators & generators**: objects with `__iter__`/`__next__`; `yield` creates generators.",
        .functions:             "**Functions** are defined with `def`; support `*args`, `**kwargs`, annotations & defaults.",
        .stringFormatting:      "**F-strings** (PEP 498) embed expressions: `f\"{value:.2f}\"`.",
        .fileIO:                "**File I/O** uses `open()`, plus `pathlib.Path` for OO paths.",
        .logging:               "**Logging** via `logging` module; configure levels, handlers & formatters.",
        .testing:               "**Testing**: `unittest`; `pytest` offers fixtures & expressive assertions.",
        .patternMatching:       "**Structural pattern matching** (`match`/`case`) landed in 3.10.",
        .virtualEnv:            "**Virtual environments** (`python -m venv`, `pipenv`, `poetry`) isolate dependencies.",
        .performance:           "**Performance**: profiling with `cProfile`, optimisation with `lru_cache`, Cython, NumPy.",
        .itertoolsFunctools:    "**Itertools & functools** supply high-performance iterator helpers & function utilities.",

        // ————— New —————
        .indentation:           "**Indentation** is syntactic—PEP 8 mandates 4 spaces; mixing tabs & spaces raises `TabError`.",
        .dataTypes:             "**Core data types**: `int`, `float`, `complex`, `bool`, `str`, `bytes`, `list`, `tuple`, `set`, `dict`.",
        .listsTuples:           "**Lists** are mutable ordered sequences; **tuples** are immutable and thus hashable if their elements are.",
        .setsDicts:             "**Sets** store unique unordered items; **dicts** map keys → values and preserve insertion order (≥3.7).",
        .slicing:               "**Slicing** `[start:stop:step]` returns subsequences; omit indices for defaults; negative indices count from the end.",
        .variableScope:         "**Scope** follows LEGB (Local, Enclosing, Global, Built-in); `global` & `nonlocal` re-bind outer scopes.",
        .builtins:              "**Built-ins** (`len`, `sum`, `enumerate`, `zip`, `map`, …) are always available without import.",
        .sorting:               "**Sorting**: `sorted(iterable, key=…, reverse=…)` returns a new list; `list.sort()` sorts in-place.",
        .regex:                 "**Regular expressions** via `re` with helpers like `search`, `match`, `findall`, and compiled patterns.",
        .serialization:         "**JSON serialisation** uses `json.dumps/loads`; for arbitrary objects use `pickle` (unsafe) or 3rd-party `yaml`.",
        .subprocessModule:      "**subprocess** executes external commands; high-level `run()` wraps `Popen` and returns `CompletedProcess`.",
        .networking:            "**Networking**: low-level `socket`; `urllib.request` for HTTP; 3rd-party **Requests** for ergonomic HTTP.",
        .oopInheritance:        "**Inheritance** allows subclasses to extend or override base behaviour; multiple inheritance is supported.",
        .magicMethods:          "**Magic (dunder) methods** (`__str__`, `__len__`, `__iter__`, …) integrate objects with Python protocols.",
        .properties:            "`@property` turns a method into an attribute; optional setters/getters give controlled access.",
        .advancedTyping:        "**Advanced typing**: `Union`, `Literal`, `TypedDict`, `NewType`, generics with `TypeVar`, `ParamSpec`, `Self`.",
        .metaclasses:           "**Metaclasses** customise class creation via `__new__`/`__init__`; declare with `class X(metaclass=Meta): …`",
        .debugging:             "**Debugging**: `pdb`, `breakpoint()` (3.7+), IDE debuggers, `logging` & assertions.",
        .styleGuide:            "**Style**: PEP 8, `black` auto-formatter, `flake8`/`pylint` linters, `isort` for imports.",
        .databaseSqlite:        "**sqlite3** std-lib module offers zero-config relational DBs via `sqlite3.connect()` and cursors."
    ]

    static func text(for topic: Topic) -> String { map[topic] ?? "" }
}

/// ---------------------------------------------------------------------
/// MARK:  Question factory helpers
/// ---------------------------------------------------------------------
extension Topic {

    /// Returns a *multiple-choice* question object for this topic.
    func generated() -> DiscreteMathQuestion {
        switch self {
        // ————— Existing generators —————
        case .variableKeyword:       return QuestionGenerator.variableKeywordQuestion()
        case .constantKeyword:       return QuestionGenerator.constantKeywordQuestion()
        case .optionals:             return QuestionGenerator.optionalsQuestion()
        case .closures:              return QuestionGenerator.closuresQuestion()
        case .structsVsClasses:      return QuestionGenerator.structsVsClassesQuestion()
        case .protocols:             return QuestionGenerator.protocolsQuestion()
        case .generics:              return QuestionGenerator.genericsQuestion()
        case .concurrency:           return QuestionGenerator.concurrencyQuestion()
        case .controlFlow:           return QuestionGenerator.controlFlowQuestion()
        case .listComprehensions:    return QuestionGenerator.listComprehensionsQuestion()
        case .dictSetComprehensions: return QuestionGenerator.dictSetComprehensionsQuestion()
        case .decorators:            return QuestionGenerator.decoratorsQuestion()
        case .contextManagers:       return QuestionGenerator.contextManagersQuestion()
        case .exceptions:            return QuestionGenerator.exceptionsQuestion()
        case .modulesPackages:       return QuestionGenerator.modulesPackagesQuestion()
        case .iteratorsGenerators:   return QuestionGenerator.iteratorsGeneratorsQuestion()
        case .functions:             return QuestionGenerator.functionsQuestion()
        case .stringFormatting:      return QuestionGenerator.stringFormattingQuestion()
        case .fileIO:                return QuestionGenerator.fileIOQuestion()
        case .logging:               return QuestionGenerator.loggingQuestion()
        case .testing:               return QuestionGenerator.testingQuestion()
        case .patternMatching:       return QuestionGenerator.patternMatchingQuestion()
        case .virtualEnv:            return QuestionGenerator.virtualEnvQuestion()
        case .performance:           return QuestionGenerator.performanceQuestion()
        case .itertoolsFunctools:    return QuestionGenerator.itertoolsFunctoolsQuestion()

        // ————— New generators —————
        case .indentation:           return QuestionGenerator.indentationQuestion()
        case .dataTypes:             return QuestionGenerator.dataTypesQuestion()
        case .listsTuples:           return QuestionGenerator.listsTuplesQuestion()
        case .setsDicts:             return QuestionGenerator.setsDictsQuestion()
        case .slicing:               return QuestionGenerator.slicingQuestion()
        case .variableScope:         return QuestionGenerator.variableScopeQuestion()
        case .builtins:              return QuestionGenerator.builtinsQuestion()
        case .sorting:               return QuestionGenerator.sortingQuestion()
        case .regex:                 return QuestionGenerator.regexQuestion()
        case .serialization:         return QuestionGenerator.serializationQuestion()
        case .subprocessModule:      return QuestionGenerator.subprocessQuestion()
        case .networking:            return QuestionGenerator.networkingQuestion()
        case .oopInheritance:        return QuestionGenerator.oopInheritanceQuestion()
        case .magicMethods:          return QuestionGenerator.magicMethodsQuestion()
        case .properties:            return QuestionGenerator.propertiesQuestion()
        case .advancedTyping:        return QuestionGenerator.advancedTypingQuestion()
        case .metaclasses:           return QuestionGenerator.metaclassesQuestion()
        case .debugging:             return QuestionGenerator.debuggingQuestion()
        case .styleGuide:            return QuestionGenerator.styleGuideQuestion()
        case .databaseSqlite:        return QuestionGenerator.databaseSqliteQuestion()
        }
    }

    /// Helper that converts a multiple-choice question into a simple prompt–answer pair.
    func randomQuestion() -> Question {
        let q = generated()
        return Question(prompt: q.question, answer: q.answers[q.correctAnswerIndex])
    }

    /// Randomly returns either a multiple-choice or short-answer wrapper.
    func mixedQuestion() -> QuizQuestion {
        Bool.random() ? .multiple(generated()) : .submit(randomQuestion())
    }

    var explanation: String { TopicExplanations.text(for: self) }
    var short: String       { String(title.prefix(12)) }

    func answer(for _: String) -> String {
        "\(explanation)\n\n(For full details, ask about a concrete example.)"
    }
}


import Foundation

/// Factory for every multiple-choice quiz item.
/// Each helper returns a **DiscreteMathQuestion** ready for the UI.
enum QuestionGenerator {

    static let maxCount: Int = 100   // upper-bound safeguarding

    // MARK: -- Internal convenience
    private static func make(
        _ prompt: String,
        _ options: [String],
        _ correct: Int,
        _ explanation: String,
        _ topic: Topic
    ) -> DiscreteMathQuestion {
        DiscreteMathQuestion(
            question: prompt,
            answers: options,
            correctAnswerIndex: correct,
            explanation: explanation,
            topic: topic
        )
    }

    // ──────────────────────────────────────────────────────────
    // Existing question builders (unchanged)
    // ──────────────────────────────────────────────────────────
    static func variableKeywordQuestion() -> DiscreteMathQuestion {
        make(
            "Which operator assigns a value to a variable in Python?",
            ["=", "==", ":=", "->"],
            0,
            "`=` binds a name to an object; `==` tests equality, `:=` is the walrus operator, and `->` annotates returns.",
            .variableKeyword
        )
    }

    static func constantKeywordQuestion() -> DiscreteMathQuestion {
        make(
            "How are constants typically indicated in Python code?",
            ["ALL_CAPS variable names", "Using a `const` keyword", "Prefixing with `!`", "Using `final` at runtime"],
            0,
            "Python has no `const`; uppercase names at module scope signal constants by convention.",
            .constantKeyword
        )
    }

    static func optionalsQuestion() -> DiscreteMathQuestion {
        make(
            "What object represents the absence of a value in Python?",
            ["None", "nil", "null", "undefined"],
            0,
            "`None` is Python’s null singleton.",
            .optionals
        )
    }

    static func closuresQuestion() -> DiscreteMathQuestion {
        make(
            "What keyword defines an anonymous function in Python?",
            ["lambda", "def", "func", "anonymous"],
            0,
            "`lambda` creates a closure capturing outer variables.",
            .closures
        )
    }

    static func structsVsClassesQuestion() -> DiscreteMathQuestion {
        make(
            "Which decorator simplifies creation of data-carrier classes?",
            ["@dataclass", "@staticmethod", "@property", "@abstractmethod"],
            0,
            "`@dataclass` auto-generates boilerplate like `__init__`.",
            .structsVsClasses
        )
    }

    static func protocolsQuestion() -> DiscreteMathQuestion {
        make(
            "PEP 544 introduced which typing feature?",
            ["Protocols for structural subtyping", "Mandatory interface inheritance", "Checked exceptions", "Null-safety operators"],
            0,
            "Protocols enable duck-typed static type checking.",
            .protocols
        )
    }

    static func genericsQuestion() -> DiscreteMathQuestion {
        make(
            "Which module provides `TypeVar`?",
            ["typing", "types", "collections", "sys"],
            0,
            "`typing` underpins generics and type hints.",
            .generics
        )
    }

    static func concurrencyQuestion() -> DiscreteMathQuestion {
        make(
            "Which std-lib module underlies `async`/`await`?",
            ["asyncio", "threading", "multiprocessing", "queue"],
            0,
            "`asyncio` supplies the event loop.",
            .concurrency
        )
    }

    static func controlFlowQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword starts a `while` loop?",
            ["while", "loop", "for", "do"],
            0,
            "`while` repeats until the condition is false.",
            .controlFlow
        )
    }

    static func listComprehensionsQuestion() -> DiscreteMathQuestion {
        make(
            "Which expression creates a list of squares 0-9?",
            ["[x**2 for x in range(10)]", "list(x**2 for x in range(10))", "{x**2 for x in range(10)}", "(x**2 for x in range(10))"],
            0,
            "Brackets build a list; braces a set; parentheses a generator.",
            .listComprehensions
        )
    }

    static func dictSetComprehensionsQuestion() -> DiscreteMathQuestion {
        make(
            "Which syntax builds a set of even numbers from 0-9?",
            ["{x for x in range(10) if x%2==0}", "[x for x in range(10) if x%2==0]", "{x: x%2 for x in range(10)}", "(x for x in range(10) if x%2==0)"],
            0,
            "Braces with a single expression create a set comprehension.",
            .dictSetComprehensions
        )
    }

    static func decoratorsQuestion() -> DiscreteMathQuestion {
        make(
            "Which symbol prefixes a decorator?",
            ["@", "#", "$", "%"],
            0,
            "`@decorator` precedes the function/class header.",
            .decorators
        )
    }

    static func contextManagersQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword acquires a context manager?",
            ["with", "use", "open", "as"],
            0,
            "`with` ensures deterministic cleanup via `__exit__`.",
            .contextManagers
        )
    }

    static func exceptionsQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword begins a try/except construct?",
            ["try", "catch", "except", "raise"],
            0,
            "`try` encloses code that may raise.",
            .exceptions
        )
    }

    static func modulesPackagesQuestion() -> DiscreteMathQuestion {
        make(
            "Which file marks a directory as a package (pre-3.3)?",
            ["__init__.py", "__main__.py", "setup.py", "pyproject.toml"],
            0,
            "`__init__.py` historically signals a package.",
            .modulesPackages
        )
    }

    static func iteratorsGeneratorsQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword yields a value lazily?",
            ["yield", "return", "produce", "next"],
            0,
            "`yield` pauses and resumes generator execution.",
            .iteratorsGenerators
        )
    }

    static func functionsQuestion() -> DiscreteMathQuestion {
        make(
            "Which symbol packs arbitrary positional args in a function signature?",
            ["*", "**", "&", "..."],
            0,
            "`*args` collects extra positional parameters.",
            .functions
        )
    }

    static func stringFormattingQuestion() -> DiscreteMathQuestion {
        make(
            "Which formatting style allows in-line expressions since Python 3.6?",
            ["f-strings", "% formatting", "`str.format`", "Template strings"],
            0,
            "Prefix with `f` to create an f-string.",
            .stringFormatting
        )
    }

    static func fileIOQuestion() -> DiscreteMathQuestion {
        make(
            "Which mode opens a file for reading binary data?",
            ["'rb'", "'r'", "'wb'", "'ab'"],
            0,
            "`'rb'` stands for *read-binary*.",
            .fileIO
        )
    }

    static func loggingQuestion() -> DiscreteMathQuestion {
        make(
            "Which function emits an INFO-level log message?",
            ["logging.info()", "logging.debug()", "logging.warning()", "logging.error()"],
            0,
            "`logging.info()` logs at INFO level.",
            .logging
        )
    }

    static func testingQuestion() -> DiscreteMathQuestion {
        make(
            "Which assertion style is preferred by pytest?",
            ["Plain `assert` statement", "`self.assertEqual`", "`expect`", "`assertThat`"],
            0,
            "Pytest rewrites Python’s `assert` for rich output.",
            .testing
        )
    }

    static func patternMatchingQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword introduces structural pattern matching?",
            ["match", "switch", "case", "pattern"],
            0,
            "`match` at top level followed by `case` clauses.",
            .patternMatching
        )
    }

    static func virtualEnvQuestion() -> DiscreteMathQuestion {
        make(
            "Which command creates a virtual environment using the std-lib?",
            ["python -m venv env", "pip install virtualenv", "conda create -n env", "virtualenv env"],
            0,
            "`python -m venv` is built-in since 3.3.",
            .virtualEnv
        )
    }

    static func performanceQuestion() -> DiscreteMathQuestion {
        make(
            "Which decorator memoises function results in std-lib?",
            ["functools.lru_cache", "functools.cache", "functools.memoize", "lru"],
            0,
            "`functools.lru_cache` caches call results.",
            .performance
        )
    }

    static func itertoolsFunctoolsQuestion() -> DiscreteMathQuestion {
        make(
            "Which `itertools` function returns a Cartesian product?",
            ["product", "chain", "zip_longest", "combinations"],
            0,
            "`itertools.product` computes Cartesian products.",
            .itertoolsFunctools
        )
    }

    // ──────────────────────────────────────────────────────────
    // NEW  – 20 additional question builders
    // ──────────────────────────────────────────────────────────
    static func indentationQuestion() -> DiscreteMathQuestion {
        make(
            "According to PEP 8, how many spaces should one indentation level be?",
            ["4", "2", "Tab character", "8"],
            0,
            "PEP 8 mandates 4 spaces per level; avoid tabs.",
            .indentation
        )
    }

    static func dataTypesQuestion() -> DiscreteMathQuestion {
        make(
            "Which of these is an *immutable* built-in sequence type?",
            ["tuple", "list", "dict", "set"],
            0,
            "`tuple` cannot be modified after creation.",
            .dataTypes
        )
    }

    static func listsTuplesQuestion() -> DiscreteMathQuestion {
        make(
            "Which list method appends a single element to the end?",
            ["append()", "add()", "push()", "extend()"],
            0,
            "`list.append(x)` adds *one* element.",
            .listsTuples
        )
    }

    static func setsDictsQuestion() -> DiscreteMathQuestion {
        make(
            "Which operator tests membership in a dictionary’s *keys*?",
            ["in", "has", "contains", "exists"],
            0,
            "`key in my_dict` checks key membership.",
            .setsDicts
        )
    }

    static func slicingQuestion() -> DiscreteMathQuestion {
        make(
            "What is the result of \"abcde\"[1:4] ?",
            ["\"bcd\"", "\"abc\"", "\"bcde\"", "\"abcd\""],
            0,
            "Slice is inclusive of start index 1 and exclusive of stop index 4.",
            .slicing
        )
    }

    static func variableScopeQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword re-binds an *enclosing-scope* variable inside a nested function?",
            ["nonlocal", "global", "outer", "static"],
            0,
            "`nonlocal` targets the nearest enclosing (non-global) scope.",
            .variableScope
        )
    }

    static func builtinsQuestion() -> DiscreteMathQuestion {
        make(
            "Which built-in converts an iterable into a *set*?",
            ["set()", "list()", "tuple()", "dict()"],
            0,
            "`set(iterable)` removes duplicates and returns a set.",
            .builtins
        )
    }

    static func sortingQuestion() -> DiscreteMathQuestion {
        make(
            "Which parameter of `sorted()` lets you supply a custom key function?",
            ["key", "cmp", "order", "by"],
            0,
            "`sorted(seq, key=str.lower)` for case-insensitive sort.",
            .sorting
        )
    }

    static func regexQuestion() -> DiscreteMathQuestion {
        make(
            "Which std-lib module provides regular expressions?",
            ["re", "regex", "pattern", "regexp"],
            0,
            "`import re` gives access to regex functionality.",
            .regex
        )
    }

    static func serializationQuestion() -> DiscreteMathQuestion {
        make(
            "Which function serialises a Python object to a JSON *string*?",
            ["json.dumps()", "json.dump()", "json.loads()", "json.load()"],
            0,
            "`json.dumps(obj)` → str; `dump()` writes to a file.",
            .serialization
        )
    }

    static func subprocessQuestion() -> DiscreteMathQuestion {
        make(
            "Which `subprocess` helper executes a command and returns a `CompletedProcess`?",
            ["subprocess.run()", "subprocess.call()", "subprocess.Popen()", "subprocess.check_output()"],
            0,
            "`run()` is a high-level wrapper introduced in Python 3.5.",
            .subprocessModule
        )
    }

    static func networkingQuestion() -> DiscreteMathQuestion {
        make(
            "Which THIRD-PARTY library is famous for simplifying HTTP requests?",
            ["Requests", "urllib", "http.client", "aiohttp"],
            0,
            "`Requests` (pip install requests) offers a friendly API.",
            .networking
        )
    }

    static func oopInheritanceQuestion() -> DiscreteMathQuestion {
        make(
            "Choose the correct syntax for declaring a class *Child* that inherits from *Base*.",
            ["class Child(Base): pass", "class Child < Base: pass", "class Child inherits Base: pass", "class Child: Base"],
            0,
            "Put the base class in parentheses after the class name.",
            .oopInheritance
        )
    }

    static func magicMethodsQuestion() -> DiscreteMathQuestion {
        make(
            "Which magic method makes an object *iterable*?",
            ["__iter__", "__len__", "__call__", "__next__"],
            0,
            "`__iter__` must return an iterator.",
            .magicMethods
        )
    }

    static func propertiesQuestion() -> DiscreteMathQuestion {
        make(
            "Which decorator turns a method into a read-only attribute?",
            ["@property", "@cached_property", "@attribute", "@getter"],
            0,
            "`@property` decorates a zero-argument method.",
            .properties
        )
    }

    static func advancedTypingQuestion() -> DiscreteMathQuestion {
        make(
            "Which typing construct restricts a value to a fixed set of literals?",
            ["typing.Literal", "typing.Union", "typing.Any", "typing.Optional"],
            0,
            "`Literal[\"red\", \"green\"]` enforces specific allowed strings.",
            .advancedTyping
        )
    }

    static func metaclassesQuestion() -> DiscreteMathQuestion {
        make(
            "Which dunder attribute sets a custom metaclass (Py 2 legacy style)?",
            ["__metaclass__", "__class__", "__buildclass__", "__meta__"],
            0,
            "In modern code use `class X(metaclass=Meta): …` at class header.",
            .metaclasses
        )
    }

    static func debuggingQuestion() -> DiscreteMathQuestion {
        make(
            "Which built-in module provides an interactive debugger?",
            ["pdb", "debug", "inspect", "logging"],
            0,
            "`import pdb; pdb.set_trace()` drops into the debugger.",
            .debugging
        )
    }

    static func styleGuideQuestion() -> DiscreteMathQuestion {
        make(
            "Which tool auto-formats Python code according to PEP 8?",
            ["black", "flake8", "pylint", "autopep8"],
            0,
            "`black` makes code *uniformly* formatted (“any colour you like”).",
            .styleGuide
        )
    }

    static func databaseSqliteQuestion() -> DiscreteMathQuestion {
        make(
            "Which std-lib module offers built-in SQLite database support?",
            ["sqlite3", "mysqldb", "pysqlite", "sqlalchemy"],
            0,
            "`sqlite3` has been in the std-lib since Python 2.5.",
            .databaseSqlite
        )
    }
}
