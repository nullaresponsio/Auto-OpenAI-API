import Foundation
import SwiftUI

enum Topic: String, CaseIterable, Hashable, Identifiable {
    case variableKeyword, constantKeyword, optionals
    case closures, structsVsClasses, protocols
    case generics, concurrency
    case controlFlow, listComprehensions, dictSetComprehensions
    case decorators
    case contextManagers, exceptions, modulesPackages
    case iteratorsGenerators
    case functions, stringFormatting, fileIO, logging
    case testing, patternMatching, virtualEnv, performance
    case itertoolsFunctools

    var id: String { rawValue }

    var title: String {
        switch self {
        case .variableKeyword:       return "Variables"
        case .constantKeyword:       return "Constants"
        case .optionals:             return "None & Nullability"
        case .closures:              return "Lambda Functions"
        case .structsVsClasses:      return "Classes & Data Classes"
        case .protocols:             return "Protocols"
        case .generics:              return "Type Hinting & Generics"
        case .concurrency:           return "Asyncio & Concurrency"
        case .controlFlow:           return "Control Flow"
        case .listComprehensions:    return "List Comprehensions"
        case .dictSetComprehensions: return "Dict & Set Comprehensions"
        case .decorators:            return "Decorators"
        case .contextManagers:       return "Context Managers"
        case .exceptions:            return "Exceptions & Error Handling"
        case .modulesPackages:       return "Modules & Packages"
        case .iteratorsGenerators:   return "Iterators & Generators"
        case .functions:             return "Functions & Parameters"
        case .stringFormatting:      return "F-Strings & Formatting"
        case .fileIO:                return "File I/O"
        case .logging:               return "Logging"
        case .testing:               return "Testing & pytest"
        case .patternMatching:       return "Pattern Matching"
        case .virtualEnv:            return "Virtual Environments"
        case .performance:           return "Performance & Optimization"
        case .itertoolsFunctools:    return "Itertools & Functools"
        }
    }
}

extension Topic { static var modularAddition: Topic { .variableKeyword } }

private struct TopicExplanations {
    private static let map: [Topic: String] = [
        .variableKeyword:       "**Variables** are bound with `=`; names reference objects and can rebind freely.",
        .constantKeyword:       "**Constants** rely on convention: ALL_CAPS at module scope (e.g. `PI = 3.14159`).",
        .optionals:             "**None** is the singleton signifying 'no value'. Use `Optional[T]` or `T | None` in type hints.",
        .closures:              "**Lambda functions** create anonymous callables and can close over outer-scope names.",
        .structsVsClasses:      "**Classes** model state/behavior; `@dataclass` (PEP 557) auto-generates boilerplate.",
        .protocols:             "**Protocols** (PEP 544) define structural contractsâ€”implementation by attribute presence.",
        .generics:              "**Generics** via `typing` enable precise reusable APIs.",
        .concurrency:           "**Concurrency**: `async`/`await` with `asyncio`, plus `threading`, `multiprocessing`.",
        .controlFlow:           "**Control flow**: `if`/`elif`/`else`, `for`, `while`, `break`, `continue`, `pass`.",
        .listComprehensions:    "**List comprehensions** build lists concisely: `[expr for x in seq if cond]`.",
        .dictSetComprehensions: "**Dict/Set comprehensions**: `{k:v for k,v in pairs}` or `{f(x) for x in seq}`.",
        .decorators:            "**Decorators** wrap callables; declared `@decorator` to extend behavior.",
        .contextManagers:       "**Context managers** via `with` manage resources.",
        .exceptions:            "**Exceptions**: raise subclasses of `Exception`; handle with `try`/`except`.",
        .modulesPackages:       "**Modules & packages**: `.py` files and directories with `__init__.py`.",
        .iteratorsGenerators:   "**Iterators & generators**: objects with `__iter__`/`__next__`; `yield` creates generators.",
        .functions:             "**Functions** defined with `def`; support `*args`, `**kwargs`, and annotations.",
        .stringFormatting:      "**F-strings** (PEP 498) embed expressions: `f\"{value:.2f}\"`.",
        .fileIO:                "**File I/O** with `open()`, plus `pathlib` for paths.",
        .logging:               "**Logging** via `logging` module; configure levels, handlers, formatters.",
        .testing:               "**Testing**: `unittest`; `pytest` offers fixtures and rich assertions.",
        .patternMatching:       "**Pattern matching** (`match`/`case`) provides structural decomposition.",
        .virtualEnv:            "**Virtual environments** (`python -m venv`, `pipenv`, `poetry`) isolate deps.",
        .performance:           "**Performance**: profiling (`cProfile`), optimization with `lru_cache`, C extensions.",
        .itertoolsFunctools:    "**Itertools & functools** supply performant iterator builders and helpers."
    ]
    static func text(for t: Topic) -> String { map[t] ?? "" }
}

extension Topic {
    func generated() -> DiscreteMathQuestion {
        switch self {
        case .variableKeyword:       return QuestionGenerator.variableKeywordQuestion()
        case .constantKeyword:       return QuestionGenerator.constantKeywordQuestion()
        case .optionals:             return QuestionGenerator.optionalsQuestion()
        case .closures:              return QuestionGenerator.closuresQuestion()
        case .structsVsClasses:      return QuestionGenerator.structsVsClassesQuestion()
        case .protocols:             return QuestionGenerator.protocolsQuestion()
        case .generics:              return QuestionGenerator.genericsQuestion()
        case .concurrency:           return QuestionGenerator.concurrencyQuestion()
        case .controlFlow:           return QuestionGenerator.controlFlowQuestion()
        case .listComprehensions:    return QuestionGenerator.listComprehensionsQuestion()
        case .dictSetComprehensions: return QuestionGenerator.dictSetComprehensionsQuestion()
        case .decorators:            return QuestionGenerator.decoratorsQuestion()
        case .contextManagers:       return QuestionGenerator.contextManagersQuestion()
        case .exceptions:            return QuestionGenerator.exceptionsQuestion()
        case .modulesPackages:       return QuestionGenerator.modulesPackagesQuestion()
        case .iteratorsGenerators:   return QuestionGenerator.iteratorsGeneratorsQuestion()
        case .functions:             return QuestionGenerator.functionsQuestion()
        case .stringFormatting:      return QuestionGenerator.stringFormattingQuestion()
        case .fileIO:                return QuestionGenerator.fileIOQuestion()
        case .logging:               return QuestionGenerator.loggingQuestion()
        case .testing:               return QuestionGenerator.testingQuestion()
        case .patternMatching:       return QuestionGenerator.patternMatchingQuestion()
        case .virtualEnv:            return QuestionGenerator.virtualEnvQuestion()
        case .performance:           return QuestionGenerator.performanceQuestion()
        case .itertoolsFunctools:    return QuestionGenerator.itertoolsFunctoolsQuestion()
        }
    }

    func randomQuestion() -> Question {
        let q = generated()
        return Question(prompt: q.question, answer: q.answers[q.correctAnswerIndex])
    }

    func mixedQuestion() -> QuizQuestion {
        Bool.random() ? .multiple(generated()) : .submit(randomQuestion())
    }

    var explanation: String { TopicExplanations.text(for: self) }
    var short: String { String(title.prefix(12)) }

    func answer(for _: String) -> String { "\(explanation)\n\n(For full details, ask about a concrete example.)" }
}


import Foundation

enum QuestionGenerator {

    static let maxCount: Int = 50

    private static func make(
        _ q: String,
        _ opts: [String],
        _ correct: Int,
        _ expl: String,
        _ top: Topic
    ) -> DiscreteMathQuestion {
        DiscreteMathQuestion(
            question: q,
            answers: opts,
            correctAnswerIndex: correct,
            explanation: expl,
            topic: top
        )
    }

    // Fundamentals
    static func variableKeywordQuestion() -> DiscreteMathQuestion {
        make(
            "Which operator assigns a value to a variable in Python?",
            ["=", "==", ":=", "->"],
            0,
            "`=` binds a name to an object; `==` tests equality, `:=` is the walrus operator, and `->` annotates returns.",
            .variableKeyword
        )
    }

    static func constantKeywordQuestion() -> DiscreteMathQuestion {
        make(
            "How are constants typically indicated in Python code?",
            ["ALL_CAPS variable names", "Using a `const` keyword", "Prefixing with `!`", "Using `final` at runtime"],
            0,
            "Python has no `const`; uppercase names at module scope signal constants by convention.",
            .constantKeyword
        )
    }

    static func optionalsQuestion() -> DiscreteMathQuestion {
        make(
            "What object represents the absence of a value in Python?",
            ["None", "nil", "null", "undefined"],
            0,
            "`None` is Python's null singleton.",
            .optionals
        )
    }

    static func closuresQuestion() -> DiscreteMathQuestion {
        make(
            "What keyword defines an anonymous function in Python?",
            ["lambda", "def", "func", "anonymous"],
            0,
            "`lambda` creates a closure capturing outer variables.",
            .closures
        )
    }

    static func structsVsClassesQuestion() -> DiscreteMathQuestion {
        make(
            "Which decorator simplifies creation of data carrier classes?",
            ["@dataclass", "@staticmethod", "@property", "@abstractmethod"],
            0,
            "`@dataclass` auto-generates boilerplate like `__init__`.",
            .structsVsClasses
        )
    }

    static func protocolsQuestion() -> DiscreteMathQuestion {
        make(
            "PEP 544 introduced which typing feature?",
            ["Protocols for structural subtyping", "Mandatory interface inheritance", "Checked exceptions", "Null-safety operators"],
            0,
            "Protocols enable duck-typed static type checking.",
            .protocols
        )
    }

    static func genericsQuestion() -> DiscreteMathQuestion {
        make(
            "Which module provides `TypeVar`?",
            ["typing", "types", "collections", "sys"],
            0,
            "`typing` underpins generics and type hints.",
            .generics
        )
    }

    static func concurrencyQuestion() -> DiscreteMathQuestion {
        make(
            "Which std-lib module underlies `async`/`await`?",
            ["asyncio", "threading", "multiprocessing", "queue"],
            0,
            "`asyncio` supplies the event loop.",
            .concurrency
        )
    }

    // Additional topics
    static func controlFlowQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword starts a `while` loop?",
            ["while", "loop", "for", "do"],
            0,
            "`while` repeats until the condition is false.",
            .controlFlow
        )
    }

    static func listComprehensionsQuestion() -> DiscreteMathQuestion {
        make(
            "Which expression creates a list of squares 0-9?",
            ["[x**2 for x in range(10)]", "list(x**2 for x in range(10))", "{x**2 for x in range(10)}", "(x**2 for x in range(10))"],
            0,
            "Brackets build a list; braces a set; parentheses a generator.",
            .listComprehensions
        )
    }

    static func dictSetComprehensionsQuestion() -> DiscreteMathQuestion {
        make(
            "Which syntax builds a set of even numbers from 0-9?",
            ["{x for x in range(10) if x%2==0}", "[x for x in range(10) if x%2==0]", "{x: x%2 for x in range(10)}", "(x for x in range(10) if x%2==0)"],
            0,
            "Braces with a single expression create a set comprehension.",
            .dictSetComprehensions
        )
    }

    static func decoratorsQuestion() -> DiscreteMathQuestion {
        make(
            "Which symbol prefixes a decorator?",
            ["@", "#", "$", "%"],
            0,
            "`@decorator` precedes the function/class header.",
            .decorators
        )
    }

    static func contextManagersQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword acquires a context manager?",
            ["with", "use", "open", "as"],
            0,
            "`with` ensures deterministic cleanup via `__exit__`.",
            .contextManagers
        )
    }

    static func exceptionsQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword begins a try/except construct?",
            ["try", "catch", "except", "raise"],
            0,
            "`try` encloses code that may raise.",
            .exceptions
        )
    }

    static func modulesPackagesQuestion() -> DiscreteMathQuestion {
        make(
            "Which file marks a directory as a package (pre-3.3)?",
            ["__init__.py", "__main__.py", "setup.py", "pyproject.toml"],
            0,
            "`__init__.py` historically signals a package.",
            .modulesPackages
        )
    }

    static func iteratorsGeneratorsQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword yields a value lazily?",
            ["yield", "return", "produce", "next"],
            0,
            "`yield` pauses and resumes generator execution.",
            .iteratorsGenerators
        )
    }

    // New comprehensive topics
    static func functionsQuestion() -> DiscreteMathQuestion {
        make(
            "Which symbol packs arbitrary positional args in a function signature?",
            ["*", "**", "&", "..."],
            0,
            "`*args` collects extra positional parameters.",
            .functions
        )
    }

    static func stringFormattingQuestion() -> DiscreteMathQuestion {
        make(
            "Which formatting style allows in-line expressions since Python 3.6?",
            ["f-strings", "% formatting", "`str.format`", "Template strings"],
            0,
            "Prefixing with `f` enables f-strings.",
            .stringFormatting
        )
    }

    static func fileIOQuestion() -> DiscreteMathQuestion {
        make(
            "Which mode opens a file for reading binary data?",
            ["'rb'", "'r'", "'wb'", "'ab'"],
            0,
            "`'rb'` stands for read-binary.",
            .fileIO
        )
    }

    static func loggingQuestion() -> DiscreteMathQuestion {
        make(
            "Which function emits an INFO-level log message?",
            ["logging.info()", "logging.debug()", "logging.warning()", "logging.error()"],
            0,
            "`logging.info()` logs at INFO level.",
            .logging
        )
    }

    static func testingQuestion() -> DiscreteMathQuestion {
        make(
            "Which assertion style is preferred by pytest?",
            ["Plain `assert` statement", "`self.assertEqual`", "`expect`", "`assertThat`"],
            0,
            "Pytest rewrites Python's `assert` for rich failure output.",
            .testing
        )
    }

    static func patternMatchingQuestion() -> DiscreteMathQuestion {
        make(
            "Which keyword introduces structural pattern matching?",
            ["match", "switch", "case", "pattern"],
            0,
            "`match` top-level followed by `case` clauses.",
            .patternMatching
        )
    }

    static func virtualEnvQuestion() -> DiscreteMathQuestion {
        make(
            "Which command creates a virtual environment using the std-lib?",
            ["python -m venv env", "pip install virtualenv", "conda create -n env", "virtualenv env"],
            0,
            "`python -m venv` is built-in since 3.3.",
            .virtualEnv
        )
    }

    static func performanceQuestion() -> DiscreteMathQuestion {
        make(
            "Which decorator memoizes function results in std-lib?",
            ["functools.lru_cache", "functools.cache", "functools.memoize", "lru"],
            0,
            "`functools.lru_cache` caches call results.",
            .performance
        )
    }

    static func itertoolsFunctoolsQuestion() -> DiscreteMathQuestion {
        make(
            "Which `itertools` function returns cartesian product?",
            ["product", "chain", "zip_longest", "combinations"],
            0,
            "`itertools.product` computes cartesian products.",
            .itertoolsFunctools
        )
    }
}
