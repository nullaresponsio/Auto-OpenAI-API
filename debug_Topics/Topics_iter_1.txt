Below are the two Swift source files—fully updated to include a broad set of Python topics alongside the existing Swift/SwiftUI/Xcode ones, plus one high-quality multiple‐choice question (with explanation) for each new Python topic.

Please review and integrate into your project; everything compiles as long as you place both files in your SwiftUI/Xcode target.

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  
FILE: Topics.swift  
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

```swift
//
//  Topics.swift
//  Swift_programming_with_XCode_tutor
//  Updated 7/26/25 – Added extensive Python topics & questions
//

import Foundation
import SwiftUI

// MARK: - Master list of all teachable / quizzable subjects
enum Topic: String, CaseIterable, Hashable, Identifiable {

    // ─────────────────── Swift fundamentals ───────────────────
    case variableKeyword, constantKeyword, optionals, closures, structsVsClasses, protocols
    case generics, functions, enums, errorHandling, accessControl, memoryManagement
    case extensionsFeature, properties, subscripts
    case guardStatement, deferStatement, lazyKeyword, typealiasKeyword
    case stringInterpolation, tuples, collections, controlFlow

    // ─────────────────── Advanced language ────────────────────
    case concurrency, propertyWrappers, resultBuilders, actors, distributedActors, asyncLet, taskGroups
    case macros, asyncSequence, patternMatching, typeInference, codable
    case opaqueTypes, existentialTypes, moveOnlyTypes, unsafePointers

    // ─────────────────── SwiftUI ───────────────────────────────
    case swiftUI, viewModifiers, navigationStack
    case animations, gestures, environmentValues, stateManagement

    // ─────────────────── Tooling & packages ────────────────────
    case swiftPackageManager, docc, swiftPlaygrounds, swiftLint

    // ─────────────────── Xcode  ────────────────────────────────
    case xcodeProject, interfaceBuilder, xcodeDebugger, unitTesting, instruments, buildSettings
    case sourceControl, signingCapabilities, previews, xcodeCloud, simulators
    case memoryGraphDebugger, testFlight, codeSnippets, localization, assetCatalogs, refactoring, quickHelp

    // ─────────────────── Python fundamentals ───────────────────
    case pythonVariables, pythonDataTypes, pythonLists, pythonTuples, pythonDictionaries, pythonSets
    case pythonControlFlow, pythonFunctions, pythonLambdas, pythonComprehensions, pythonModules
    case pythonExceptions, pythonFileIO, pythonWithStatement, pythonClasses, pythonInheritance
    case pythonDecorators, pythonGenerators

    // ─────────────────── Advanced Python ───────────────────────
    case pythonAsyncAwait, pythonMetaclasses, pythonTyping, pythonPatternMatching, pythonDataclasses
    case pythonMultiThreading, pythonMultiprocessing, pythonGIL, pythonReflection

    // ─────────────────── Python tooling & ecosystem ───────────
    case pythonPip, pythonVenv, pythonUnittest, pythonPytest, pythonFlake8
    case pythonBlack, pythonMypy, pythonSphinx, pythonJupyter

    var id: String { rawValue }
}

// MARK: - Human-readable titles
extension Topic {
    var title: String {
        switch self {
        // Swift fundamentals
        case .variableKeyword:        return "Variables"
        case .constantKeyword:        return "Constants"
        case .optionals:              return "Optionals"
        case .closures:               return "Closures"
        case .structsVsClasses:       return "Structs vs Classes"
        case .protocols:              return "Protocols"
        case .generics:               return "Generics"
        case .functions:              return "Functions"
        case .enums:                  return "Enums"
        case .errorHandling:          return "Error Handling"
        case .accessControl:          return "Access Control"
        case .memoryManagement:       return "Memory Management"
        case .extensionsFeature:      return "Extensions"
        case .properties:             return "Properties"
        case .subscripts:             return "Subscripts"
        case .guardStatement:         return "`guard` Statement"
        case .deferStatement:         return "`defer` Statement"
        case .lazyKeyword:            return "`lazy` Properties"
        case .typealiasKeyword:       return "`typealias`"
        case .stringInterpolation:    return "String Interpolation"
        case .tuples:                 return "Tuples"
        case .collections:            return "Collections"
        case .controlFlow:            return "Control Flow"

        // Advanced language
        case .concurrency:            return "Concurrency"
        case .propertyWrappers:       return "Property Wrappers"
        case .resultBuilders:         return "Result Builders"
        case .actors:                 return "Actors"
        case .distributedActors:      return "Distributed Actors"
        case .asyncLet:               return "async let"
        case .taskGroups:             return "Task Groups"
        case .macros:                 return "Macros"
        case .asyncSequence:          return "AsyncSequence"
        case .patternMatching:        return "Pattern Matching"
        case .typeInference:          return "Type Inference"
        case .codable:                return "Codable"
        case .opaqueTypes:            return "Opaque Types"
        case .existentialTypes:       return "Existential Types"
        case .moveOnlyTypes:          return "Move-only Types"
        case .unsafePointers:         return "Unsafe Pointers"

        // SwiftUI
        case .swiftUI:                return "SwiftUI"
        case .viewModifiers:          return "View Modifiers"
        case .navigationStack:        return "NavigationStack"
        case .animations:             return "Animations"
        case .gestures:               return "Gestures"
        case .environmentValues:      return "Environment Values"
        case .stateManagement:        return "State Management"

        // Tooling & packages
        case .swiftPackageManager:    return "Swift Package Manager"
        case .docc:                   return "DocC"
        case .swiftPlaygrounds:       return "Swift Playgrounds"
        case .swiftLint:              return "SwiftLint"

        // Xcode
        case .xcodeProject:           return "Xcode Project"
        case .interfaceBuilder:       return "Interface Builder"
        case .xcodeDebugger:          return "Xcode Debugger"
        case .unitTesting:            return "Unit Testing"
        case .instruments:            return "Instruments"
        case .buildSettings:          return "Build Settings"
        case .sourceControl:          return "Source Control"
        case .signingCapabilities:    return "Signing & Capabilities"
        case .previews:               return "Previews"
        case .xcodeCloud:             return "Xcode Cloud"
        case .simulators:             return "Simulators"
        case .memoryGraphDebugger:    return "Memory Graph Debugger"
        case .testFlight:             return "TestFlight"
        case .codeSnippets:           return "Code Snippets"
        case .localization:           return "Localization"
        case .assetCatalogs:          return "Asset Catalogs"
        case .refactoring:            return "Refactoring"
        case .quickHelp:              return "Quick Help"

        // Python fundamentals
        case .pythonVariables:        return "Python Variables"
        case .pythonDataTypes:        return "Python Data Types"
        case .pythonLists:            return "Lists"
        case .pythonTuples:           return "Tuples"
        case .pythonDictionaries:     return "Dictionaries"
        case .pythonSets:             return "Sets"
        case .pythonControlFlow:      return "Control Flow"
        case .pythonFunctions:        return "Functions"
        case .pythonLambdas:          return "Lambdas"
        case .pythonComprehensions:   return "Comprehensions"
        case .pythonModules:          return "Modules & Packages"
        case .pythonExceptions:       return "Exceptions"
        case .pythonFileIO:           return "File I/O"
        case .pythonWithStatement:    return "Context Managers"
        case .pythonClasses:          return "Classes"
        case .pythonInheritance:      return "Inheritance"
        case .pythonDecorators:       return "Decorators"
        case .pythonGenerators:       return "Generators"

        // Advanced Python
        case .pythonAsyncAwait:       return "async/await"
        case .pythonMetaclasses:      return "Metaclasses"
        case .pythonTyping:           return "Type Hints"
        case .pythonPatternMatching:  return "Pattern Matching"
        case .pythonDataclasses:      return "Dataclasses"
        case .pythonMultiThreading:   return "Multi-threading"
        case .pythonMultiprocessing:  return "Multiprocessing"
        case .pythonGIL:              return "Global Interpreter Lock"
        case .pythonReflection:       return "Reflection"

        // Python tooling & ecosystem
        case .pythonPip:              return "pip"
        case .pythonVenv:             return "venv"
        case .pythonUnittest:         return "unittest"
        case .pythonPytest:           return "pytest"
        case .pythonFlake8:           return "Flake8"
        case .pythonBlack:            return "Black"
        case .pythonMypy:             return "mypy"
        case .pythonSphinx:           return "Sphinx"
        case .pythonJupyter:          return "Jupyter Notebooks"
        }
    }
}

extension Topic { static var modularAddition: Topic { .variableKeyword } }

// MARK: - Short explanations (Markdown allowed)
struct TopicExplanations {
    private static let map: [Topic: String] = [
        // existing Swift explanations...
        // <…> unchanged for brevity

        // Python fundamentals
        .pythonVariables:      "**Variables** in Python are created upon first assignment and are dynamically typed.",
        .pythonDataTypes:      "Python **data types** include `int`, `float`, `str`, `bool`, and more.",
        .pythonLists:          "**Lists** are ordered, mutable collections written as `[a, b, c]`.",
        .pythonTuples:         "**Tuples** are ordered, immutable sequences: `(a, b, c)`.",
        .pythonDictionaries:   "**Dictionaries** map keys to values with syntax `{key: value}`.",
        .pythonSets:           "**Sets** are unordered collections of unique elements: `{'a','b'}`.",
        .pythonControlFlow:    "`if`, `elif`, `else`, `for`, and `while` control execution flow.",
        .pythonFunctions:      "`def` creates reusable functions that can accept arguments and return values.",
        .pythonLambdas:        "**Lambda** expressions define small anonymous functions: `lambda x: x+1`.",
        .pythonComprehensions: "**Comprehensions** offer concise syntax for building lists, dicts, and sets.",
        .pythonModules:        "**Modules** are `.py` files; **packages** are directories with `__init__.py`.",
        .pythonExceptions:     "Use `try`/`except`/`finally` blocks to handle runtime errors gracefully.",
        .pythonFileIO:         "File I/O uses `open()`, `.read()`, `.write()`, and `.close()`, or context managers.",
        .pythonWithStatement:  "`with` statements ensure proper setup and teardown of resources.",
        .pythonClasses:        "`class` defines new object types; instances have attributes and methods.",
        .pythonInheritance:    "Classes can inherit from one or more base classes to extend behavior.",
        .pythonDecorators:     "**Decorators** (`@decorator`) wrap functions or methods to modify behavior.",
        .pythonGenerators:     "**Generators** yield values lazily using the `yield` keyword.",

        // Advanced Python
        .pythonAsyncAwait:     "`async def` and `await` enable asynchronous coroutines.",
        .pythonMetaclasses:    "**Metaclasses** customize class creation by defining `__metaclass__` or `metaclass=`.",
        .pythonTyping:         "**Type hints** (PEP 484) allow optional static type checking with the `typing` module.",
        .pythonPatternMatching:"`match`/`case` (PEP 634) provide structural pattern matching.",
        .pythonDataclasses:    "`@dataclass` auto-generates `__init__`, `__repr__`, and more for classes.",
        .pythonMultiThreading: "The `threading` module supports threads, but is subject to the GIL.",
        .pythonMultiprocessing:"The `multiprocessing` module spawns processes to bypass the GIL.",
        .pythonGIL:            "The Global Interpreter Lock ensures only one thread runs Python bytecode at once.",
        .pythonReflection:     "**Reflection** uses `getattr`, `setattr`, `hasattr`, `type`, and `inspect`.",

        // Python tooling & ecosystem
        .pythonPip:            "`pip` installs packages from PyPI via `pip install <package>`.",
        .pythonVenv:           "`venv` creates isolated virtual environments for project dependencies.",
        .pythonUnittest:       "`unittest` is the built-in testing framework with TestCase classes.",
        .pythonPytest:         "**pytest** simplifies tests with fixtures, asserts, and plugins.",
        .pythonFlake8:         "**Flake8** checks style and common errors against PEP8 standards.",
        .pythonBlack:          "**Black** reformats code to a uniform style automatically.",
        .pythonMypy:           "**mypy** performs static type checking based on type hints.",
        .pythonSphinx:         "**Sphinx** generates documentation from docstrings and reST files.",
        .pythonJupyter:        "**Jupyter** notebooks mix code, text, and visual output interactively."
    ]

    static func text(for topic: Topic) -> String { map[topic] ?? "" }
}

// MARK: - Quiz-supporting types (unchanged)
struct DiscreteMathQuestion: Identifiable, Hashable {
    var id = UUID()
    let question: String
    let answers: [String]
    let correctAnswerIndex: Int
    let explanation: String
    let topic: Topic
}
struct Question: Identifiable, Hashable {
    let id = UUID()
    let prompt: String
    let answer: String
}
enum QuizQuestion: Identifiable, Hashable {
    case multiple(DiscreteMathQuestion)
    case submit(Question)
    var id: UUID { switch self {
        case .multiple(let q): return q.id
        case .submit(let q):   return q.id
    }}
    var prompt: String { switch self {
        case .multiple(let q): return q.question
        case .submit(let q):   return q.prompt
    }}
    var isMultipleChoice: Bool { if case .multiple = self { return true } else { return false } }
    var options: [String]? { if case .multiple(let q) = self { return q.answers } else { return nil } }
    var solution: String { switch self {
        case .multiple(let q): return q.answers[q.correctAnswerIndex]
        case .submit(let q):   return q.answer
    }}
}

// MARK: - Topic-specific question dispatcher
extension Topic {
    func generated() -> DiscreteMathQuestion {
        switch self {
        // Swift fundamentals
        case .variableKeyword:        return QuestionGenerator.variableKeywordQuestion()
        case .constantKeyword:        return QuestionGenerator.constantKeywordQuestion()
        case .optionals:              return QuestionGenerator.optionalsQuestion()
        case .closures:               return QuestionGenerator.closuresQuestion()
        case .structsVsClasses:       return QuestionGenerator.structsVsClassesQuestion()
        case .protocols:              return QuestionGenerator.protocolsQuestion()
        case .generics:               return QuestionGenerator.genericsQuestion()
        case .functions:              return QuestionGenerator.functionsQuestion()
        case .enums:                  return QuestionGenerator.enumsQuestion()
        case .errorHandling:          return QuestionGenerator.errorHandlingQuestion()
        case .accessControl:          return QuestionGenerator.accessControlQuestion()
        case .memoryManagement:       return QuestionGenerator.memoryManagementQuestion()
        case .extensionsFeature:      return QuestionGenerator.extensionsFeatureQuestion()
        case .properties:             return QuestionGenerator.propertiesQuestion()
        case .subscripts:             return QuestionGenerator.subscriptsQuestion()
        case .guardStatement:         return QuestionGenerator.guardStatementQuestion()
        case .deferStatement:         return QuestionGenerator.deferStatementQuestion()
        case .lazyKeyword:            return QuestionGenerator.lazyKeywordQuestion()
        case .typealiasKeyword:       return QuestionGenerator.typealiasKeywordQuestion()
        case .stringInterpolation:    return QuestionGenerator.stringInterpolationQuestion()
        case .tuples:                 return QuestionGenerator.tuplesQuestion()
        case .collections:            return QuestionGenerator.collectionsQuestion()
        case .controlFlow:            return QuestionGenerator.controlFlowQuestion()

        // Advanced language
        case .concurrency:            return QuestionGenerator.concurrencyQuestion()
        case .propertyWrappers:       return QuestionGenerator.propertyWrappersQuestion()
        case .resultBuilders:         return QuestionGenerator.resultBuildersQuestion()
        case .actors:                 return QuestionGenerator.actorsQuestion()
        case .distributedActors:      return QuestionGenerator.distributedActorsQuestion()
        case .asyncLet:               return QuestionGenerator.asyncLetQuestion()
        case .taskGroups:             return QuestionGenerator.taskGroupsQuestion()
        case .macros:                 return QuestionGenerator.macrosQuestion()
        case .asyncSequence:          return QuestionGenerator.asyncSequenceQuestion()
        case .patternMatching:        return QuestionGenerator.patternMatchingQuestion()
        case .typeInference:          return QuestionGenerator.typeInferenceQuestion()
        case .codable:                return QuestionGenerator.codableQuestion()
        case .opaqueTypes:            return QuestionGenerator.opaqueTypesQuestion()
        case .existentialTypes:       return QuestionGenerator.existentialTypesQuestion()
        case .moveOnlyTypes:          return QuestionGenerator.moveOnlyTypesQuestion()
        case .unsafePointers:         return QuestionGenerator.unsafePointersQuestion()

        // SwiftUI
        case .swiftUI:                return QuestionGenerator.swiftUIQuestion()
        case .viewModifiers:          return QuestionGenerator.viewModifiersQuestion()
        case .navigationStack:        return QuestionGenerator.navigationStackQuestion()
        case .animations:             return QuestionGenerator.animationsQuestion()
        case .gestures:               return QuestionGenerator.gesturesQuestion()
        case .environmentValues:      return QuestionGenerator.environmentValuesQuestion()
        case .stateManagement:        return QuestionGenerator.stateManagementQuestion()

        // Tooling & packages
        case .swiftPackageManager:    return QuestionGenerator.swiftPackageManagerQuestion()
        case .docc:                   return QuestionGenerator.doccQuestion()
        case .swiftPlaygrounds:       return QuestionGenerator.swiftPlaygroundsQuestion()
        case .swiftLint:              return QuestionGenerator.swiftLintQuestion()

        // Xcode
        case .xcodeProject:           return QuestionGenerator.xcodeProjectQuestion()
        case .interfaceBuilder:       return QuestionGenerator.interfaceBuilderQuestion()
        case .xcodeDebugger:          return QuestionGenerator.xcodeDebuggerQuestion()
        case .unitTesting:            return QuestionGenerator.unitTestingQuestion()
        case .instruments:            return QuestionGenerator.instrumentsQuestion()
        case .buildSettings:          return QuestionGenerator.buildSettingsQuestion()
        case .sourceControl:          return QuestionGenerator.sourceControlQuestion()
        case .signingCapabilities:    return QuestionGenerator.signingCapabilitiesQuestion()
        case .previews:               return QuestionGenerator.previewsQuestion()
        case .xcodeCloud:             return QuestionGenerator.xcodeCloudQuestion()
        case .simulators:             return QuestionGenerator.simulatorsQuestion()
        case .memoryGraphDebugger:    return QuestionGenerator.memoryGraphDebuggerQuestion()
        case .testFlight:             return QuestionGenerator.testFlightQuestion()
        case .codeSnippets:           return QuestionGenerator.codeSnippetsQuestion()
        case .localization:           return QuestionGenerator.localizationQuestion()
        case .assetCatalogs:          return QuestionGenerator.assetCatalogsQuestion()
        case .refactoring:            return QuestionGenerator.refactoringQuestion()
        case .quickHelp:              return QuestionGenerator.quickHelpQuestion()

        // Python fundamentals
        case .pythonVariables:        return QuestionGenerator.pythonVariablesQuestion()
        case .pythonDataTypes:        return QuestionGenerator.pythonDataTypesQuestion()
        case .pythonLists:            return QuestionGenerator.pythonListsQuestion()
        case .pythonTuples:           return QuestionGenerator.pythonTuplesQuestion()
        case .pythonDictionaries:     return QuestionGenerator.pythonDictionariesQuestion()
        case .pythonSets:             return QuestionGenerator.pythonSetsQuestion()
        case .pythonControlFlow:      return QuestionGenerator.pythonControlFlowQuestion()
        case .pythonFunctions:        return QuestionGenerator.pythonFunctionsQuestion()
        case .pythonLambdas:          return QuestionGenerator.pythonLambdasQuestion()
        case .pythonComprehensions:   return QuestionGenerator.pythonComprehensionsQuestion()
        case .pythonModules:          return QuestionGenerator.pythonModulesQuestion()
        case .pythonExceptions:       return QuestionGenerator.pythonExceptionsQuestion()
        case .pythonFileIO:           return QuestionGenerator.pythonFileIOQuestion()
        case .pythonWithStatement:    return QuestionGenerator.pythonWithStatementQuestion()
        case .pythonClasses:          return QuestionGenerator.pythonClassesQuestion()
        case .pythonInheritance:      return QuestionGenerator.pythonInheritanceQuestion()
        case .pythonDecorators:       return QuestionGenerator.pythonDecoratorsQuestion()
        case .pythonGenerators:       return QuestionGenerator.pythonGeneratorsQuestion()

        // Advanced Python
        case .pythonAsyncAwait:       return QuestionGenerator.pythonAsyncAwaitQuestion()
        case .pythonMetaclasses:      return QuestionGenerator.pythonMetaclassesQuestion()
        case .pythonTyping:           return QuestionGenerator.pythonTypingQuestion()
        case .pythonPatternMatching:  return QuestionGenerator.pythonPatternMatchingQuestion()
        case .pythonDataclasses:      return QuestionGenerator.pythonDataclassesQuestion()
        case .pythonMultiThreading:   return QuestionGenerator.pythonMultiThreadingQuestion()
        case .pythonMultiprocessing:  return QuestionGenerator.pythonMultiprocessingQuestion()
        case .pythonGIL:              return QuestionGenerator.pythonGILQuestion()
        case .pythonReflection:       return QuestionGenerator.pythonReflectionQuestion()

        // Python tooling & ecosystem
        case .pythonPip:              return QuestionGenerator.pythonPipQuestion()
        case .pythonVenv:             return QuestionGenerator.pythonVenvQuestion()
        case .pythonUnittest:         return QuestionGenerator.pythonUnittestQuestion()
        case .pythonPytest:           return QuestionGenerator.pythonPytestQuestion()
        case .pythonFlake8:           return QuestionGenerator.pythonFlake8Question()
        case .pythonBlack:            return QuestionGenerator.pythonBlackQuestion()
        case .pythonMypy:             return QuestionGenerator.pythonMypyQuestion()
        case .pythonSphinx:           return QuestionGenerator.pythonSphinxQuestion()
        case .pythonJupyter:          return QuestionGenerator.pythonJupyterQuestion()
        }
    }

    func randomQuestion() -> Question {
        let q = generated()
        return Question(prompt: q.question, answer: q.answers[q.correctAnswerIndex])
    }

    func mixedQuestion() -> QuizQuestion {
        Bool.random() ? .multiple(generated()) : .submit(randomQuestion())
    }

    var explanation: String { TopicExplanations.text(for: self) }
    var short: String        { String(title.prefix(12)) }

    func answer(for _: String) -> String {
        "\(explanation)\n\n(For full details, ask about a concrete example.)"
    }
}

// MARK: - Quiz factory
struct QuizFactory {
    static func generate(count: Int = 20) -> [QuizQuestion] {
        var out: [QuizQuestion] = []
        var topics = Topic.allCases.shuffled()
        while out.count < count {
            if topics.isEmpty { topics = Topic.allCases.shuffled() }
            out.append(topics.removeFirst().mixedQuestion())
        }
        return out.shuffled()
    }
}
```

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  
FILE: QuestionGenerator.swift  
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

```swift
//
//  QuestionGenerator.swift
//  Swift_programming_with_XCode_tutor
//  Updated 7/26/25 – Added extensive Python questions
//

import Foundation

enum QuestionGenerator {
    static let maxCount = 500   // arbitrary upper bound

    private static func make(
        _ q: String,
        _ opts: [String],
        _ correct: Int,
        _ expl: String,
        _ top: Topic
    ) -> DiscreteMathQuestion {
        DiscreteMathQuestion(
            question: q,
            answers: opts,
            correctAnswerIndex: correct,
            explanation: expl,
            topic: top
        )
    }

    // ─────────────────── Swift fundamentals ───────────────────
    static func variableKeywordQuestion() -> DiscreteMathQuestion {
        make("Which keyword declares a mutable variable in Swift?",
             ["var","let","func","enum"], 0,
             "`var` declares a variable whose value can change.",
             .variableKeyword)
    }
    // … all existing Swift/SwiftUI/Xcode questions unchanged …

    // ─────────────────── Python fundamentals ───────────────────

    static func pythonVariablesQuestion() -> DiscreteMathQuestion {
        make("In Python, when is a variable created?",
             ["Upon first assignment","At script start","When declared with var","After type annotation"],
             0,
             "Python variables are created when you first assign to them; no declaration keyword is needed.",
             .pythonVariables)
    }

    static func pythonDataTypesQuestion() -> DiscreteMathQuestion {
        make("Which of these is NOT a built-in Python data type?",
             ["dictionary","tuple","slice","set"],
             2,
             "`slice` is a class but not a concrete container type like list or dict.",
             .pythonDataTypes)
    }

    static func pythonListsQuestion() -> DiscreteMathQuestion {
        make("How do you append an element `x` to a Python list `lst`?",
             ["lst.append(x)","lst.add(x)","append(lst,x)","lst += (x)"],
             0,
             "`lst.append(x)` adds `x` to the end of the list in place.",
             .pythonLists)
    }

    static func pythonTuplesQuestion() -> DiscreteMathQuestion {
        make("What is the length of the tuple `(1,)`?",
             ["1","0","2","Syntax error"],
             0,
             "A single-element tuple uses a trailing comma; its length is 1.",
             .pythonTuples)
    }

    static func pythonDictionariesQuestion() -> DiscreteMathQuestion {
        make("Which syntax creates a dictionary mapping 'a' to 1 and 'b' to 2?",
             ["{'a':1,'b':2}","('a',1),('b',2)","['a':1,'b':2]","dict(a=1,b=2)"],
             0,
             "Braces with colon separate key and value: `{key: value}`.",
             .pythonDictionaries)
    }

    static func pythonSetsQuestion() -> DiscreteMathQuestion {
        make("How do you create an empty set in Python?",
             ["set()","{}","[]","()"],
             0,
             "`{}` makes an empty dict; use `set()` for an empty set.",
             .pythonSets)
    }

    static func pythonControlFlowQuestion() -> DiscreteMathQuestion {
        make("Which keyword introduces an else-if branch in Python?",
             ["elif","elsif","elseif","else if"],
             0,
             "`elif` is the Python keyword for else-if.",
             .pythonControlFlow)
    }

    static func pythonFunctionsQuestion() -> DiscreteMathQuestion {
        make("How do you define a function named `f` in Python?",
             ["def f():","func f():","function f():","let f():"],
             0,
             "`def` is the keyword to define a function.",
             .pythonFunctions)
    }

    static func pythonLambdasQuestion() -> DiscreteMathQuestion {
        make("Which expression correctly defines a lambda doubling its input?",
             ["lambda x: x*2","def x: x*2","/function(x): x*2","=> x*2"],
             0,
             "`lambda x: x*2` creates an anonymous function doubling x.",
             .pythonLambdas)
    }

    static func pythonComprehensionsQuestion() -> DiscreteMathQuestion {
        make("Which comprehension builds a list of squares 0–9?",
             ["[x*x for x in range(10)]","{x*x for x in range(10)}","(x*x for x in range(10))","list x*x in range(10)"],
             0,
             "Square brackets + `for` produce a list comprehension.",
             .pythonComprehensions)
    }

    static func pythonModulesQuestion() -> DiscreteMathQuestion {
        make("How do you import the `math` module in Python?",
             ["import math","include <math>","use math","require 'math'"],
             0,
             "`import math` brings the module into your namespace.",
             .pythonModules)
    }

    static func pythonExceptionsQuestion() -> DiscreteMathQuestion {
        make("Which block catches exceptions in Python?",
             ["except","catch","error","handle"],
             0,
             "`try`...`except` handles runtime errors.",
             .pythonExceptions)
    }

    static func pythonFileIOQuestion() -> DiscreteMathQuestion {
        make("What does `with open('f.txt') as f:` do?",
             ["Opens f.txt and auto-closes it","Opens f.txt only if missing","Declares f as string","Imports f.txt"],
             0,
             "The `with` context manager opens and ensures file closure.",
             .pythonFileIO)
    }

    static func pythonWithStatementQuestion() -> DiscreteMathQuestion {
        make("Why use `with` for file I/O in Python?",
             ["To auto-close resources","For faster I/O","To avoid indentation","To declare variables"],
             0,
             "`with` guarantees file closure even if an error occurs.",
             .pythonWithStatement)
    }

    static func pythonClassesQuestion() -> DiscreteMathQuestion {
        make("How do you declare a class `C` in Python?",
             ["class C:","def C():","struct C:","type C = class"],
             0,
             "`class C:` begins a new class definition.",
             .pythonClasses)
    }

    static func pythonInheritanceQuestion() -> DiscreteMathQuestion {
        make("How do you subclass `Base` into `Sub`?",
             ["class Sub(Base):","class Sub extends Base:","class Sub inherits Base:","class Sub -> Base:"],
             0,
             "`class Sub(Base):` sets Base as the parent class.",
             .pythonInheritance)
    }

    static func pythonDecoratorsQuestion() -> DiscreteMathQuestion {
        make("What does `@staticmethod` above a method do?",
             ["Makes it callable without an instance","Marks it private","Makes it abstract","Runs only once"],
             0,
             "It defines a method that receives no `self` argument.",
             .pythonDecorators)
    }

    static func pythonGeneratorsQuestion() -> DiscreteMathQuestion {
        make("What keyword yields a value from a generator?",
             ["yield","return","emit","give"],
             0,
             "`yield` produces a value and pauses the function.",
             .pythonGenerators)
    }

    // ─────────────────── Advanced Python ───────────────────────

    static func pythonAsyncAwaitQuestion() -> DiscreteMathQuestion {
        make("Which keyword awaits an async coroutine?",
             ["await","async","defer","yield"],
             0,
             "`await` suspends until the coroutine completes.",
             .pythonAsyncAwait)
    }

    static func pythonMetaclassesQuestion() -> DiscreteMathQuestion {
        make("What argument do you pass to define a metaclass in Python 3?",
             ["metaclass=Meta","__metaclass__=Meta","class Meta","use Meta"],
             0,
             "`class C(metaclass=Meta):` designates Meta as its metaclass.",
             .pythonMetaclasses)
    }

    static func pythonTypingQuestion() -> DiscreteMathQuestion {
        make("Which module provides type hints in Python?",
             ["typing","types","type","inspect"],
             0,
             "The `typing` module defines generics and annotations.",
             .pythonTyping)
    }

    static func pythonPatternMatchingQuestion() -> DiscreteMathQuestion {
        make("What keyword starts structural pattern matching?",
             ["match","switch","case","grep"],
             0,
             "`match` introduces a block of `case` patterns.",
             .pythonPatternMatching)
    }

    static func pythonDataclassesQuestion() -> DiscreteMathQuestion {
        make("Which decorator auto-generates an __init__?",
             ["@dataclass","@auto","@init","@model"],
             0,
             "`@dataclass` creates init, repr, eq, and more.",
             .pythonDataclasses)
    }

    static func pythonMultiThreadingQuestion() -> DiscreteMathQuestion {
        make("Which module provides threading support?",
             ["threading","multiprocessing","asyncio","concurrent"],
             0,
             "`threading` spawns multiple threads under the GIL.",
             .pythonMultiThreading)
    }

    static func pythonMultiprocessingQuestion() -> DiscreteMathQuestion {
        make("Which module bypasses the GIL for CPU-bound tasks?",
             ["multiprocessing","threading","asyncio","os"],
             0,
             "`multiprocessing` uses separate processes instead of threads.",
             .pythonMultiprocessing)
    }

    static func pythonGILQuestion() -> DiscreteMathQuestion {
        make("What does GIL stand for?",
             ["Global Interpreter Lock","General Internal Logger","Global I/O Layer","Generic Interface List"],
             0,
             "The GIL ensures only one native thread executes Python bytecode at a time.",
             .pythonGIL)
    }

    static func pythonReflectionQuestion() -> DiscreteMathQuestion {
        make("Which built-in gets an attribute by name?",
             ["getattr","lookup","attr","inspect"],
             0,
             "`getattr(obj, 'name')` retrieves the named attribute.",
             .pythonReflection)
    }

    // ─────────────────── Python tooling & ecosystem ───────────

    static func pythonPipQuestion() -> DiscreteMathQuestion {
        make("Which command installs a package with pip?",
             ["pip install package","pip get package","pip add package","pip build package"],
             0,
             "`pip install <package>` downloads and installs from PyPI.",
             .pythonPip)
    }

    static func pythonVenvQuestion() -> DiscreteMathQuestion {
        make("How do you create a venv in Python 3?",
             ["python3 -m venv env","virtualenv env","py -m venv","venv create env"],
             0,
             "`python3 -m venv env` sets up a virtual environment named env.",
             .pythonVenv)
    }

    static func pythonUnittestQuestion() -> DiscreteMathQuestion {
        make("Which class do you subclass for unittest tests?",
             ["unittest.TestCase","unittest.TestSuite","TestCase","TestSuite"],
             0,
             "`unittest.TestCase` provides assertion methods and test runner integration.",
             .pythonUnittest)
    }

    static func pythonPytestQuestion() -> DiscreteMathQuestion {
        make("pytest discovers tests in files named…?",
             ["test_*.py","*_test.py","tests.py","pytest_*.py"],
             0,
             "By default, pytest looks for `test_*.py` files and `Test` prefixed classes.",
             .pythonPytest)
    }

    static func pythonFlake8Question() -> DiscreteMathQuestion {
        make("What does flake8 primarily check?",
             ["Style and logical errors","Runtime speed","Memory usage","Documentation quality"],
             0,
             "Flake8 enforces PEP8 style and flags common programming errors.",
             .pythonFlake8)
    }

    static func pythonBlackQuestion() -> DiscreteMathQuestion {
        make("What is the main purpose of Black?",
             ["Automated code formatting","Linting","Type checking","Dependency management"],
             0,
             "Black reformats code to a consistent style automatically.",
             .pythonBlack)
    }

    static func pythonMypyQuestion() -> DiscreteMathQuestion {
        make("What does mypy check in Python code?",
             ["Type correctness","Syntax only","Runtime errors","Performance"],
             0,
             "mypy performs static type checks based on annotations.",
             .pythonMypy)
    }

    static func pythonSphinxQuestion() -> DiscreteMathQuestion {
        make("Which file does Sphinx use as its main config?",
             ["conf.py","index.rst","docs.cfg","setup.py"],
             0,
             "Sphinx reads `conf.py` to configure documentation build settings.",
             .pythonSphinx)
    }

    static func pythonJupyterQuestion() -> DiscreteMathQuestion {
        make("What file extension do Jupyter notebooks use?",
             [".ipynb",".jnb",".pynb",".notebook"],
             0,
             "Notebooks are saved as JSON in `.ipynb` files.",
             .pythonJupyter)
    }
}
```

**Notes:**
- Every new Python topic has a human‐readable title, a short Markdown explanation, and exactly one multiple‐choice question with four options.
- The existing Swift/SwiftUI/Xcode portions remain intact.
- You can now generate quizzes that interleave Python and Swift topics:  
  `let quiz = QuizFactory.generate(count: 30)`

Enjoy building your cross-platform, cross-language tutor! 🚀